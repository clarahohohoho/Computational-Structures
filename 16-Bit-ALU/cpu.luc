global Inst {
  const SET1    = 6d3;  // dest, const        : R[dest] = const
  const SET2    = 6d2; // dest, const        : R[dest] = const
  

  const LT    = 6b110101;
  const EQ    = 6b110011;
  const LE    = 6b110111;
  const ADD   = 6b0;
  const SUB   = 6b1;
  const SHL   = 6b100000;
  const SHR   = 6b100001;
  const SRA   = 6b100011; 
  const AND   = 6b011000;
  const OR    = 6b011110;
  const XOR   = 6b010110;
  const LDR   = 6b011010;
  const ROTL  = 6b001001;
  const ROTR  = 6b001011;
}
module cpu (
    input clk,         // clock
    input rst,         // reset
    input io_dip[8],
    input io_button[5],
    input aa[16],
    input bb[16],
    input auto,
    output out[16],
    output done,
    output v,
    output n,
    output z
    
  ) {
 
  .clk(clk), .rst(rst) {
    // 2D array of 16 by 8 since we want 16 registers of width 8.
    dff reg[32][16]; // CPU Registers
  }
 
  // These signals aren't strictly needed, but they help make 
  //the code a bit more readable by allowing us to rename parts
  // of the instruction.
  
  sig state[2];
  sig alufn[6];
  sig c;
  
  var i;
//  sig in[16];
 

 
  always {
  
    done = 0;
    v = 0;
    n = 0;
    z = 0;
    
    state =  io_dip[1:0];
    alufn = io_dip[7:2];        //opcode is top 6 bits
   // dest = instRom.inst[25:21];    // dest is next 5bits
   // arg1 = instRom.inst[20:16];     // arg1 is next 5bits
   // arg2 = instRom.inst[15:11];     // arg2 is last 5its
   // constant = instRom.inst[15:0]; // constant is last 16 bits
//    in[7:0] =io_dip[1];
//    in[15:8] = io_dip[2];
    out = 0;
    reg.d[d1] = aa;
    reg.d[d2] = bb;
    
    
    // Perform the operation
        

    if (io_dip[1] == 1 & io_dip[0] == 1  & io_button[1] | auto){
        reg.d[d31] =1;
        done = reg.q[d31];
        case (alufn){
       
          Inst.LT:
            reg.d[d3] = reg.q[d1] < reg.q[d2];   // less-than comparison
          Inst.EQ:
            reg.d[d3] = reg.q[d1] == reg.q[d2];  // equals comparison
          Inst.LE:
            reg.d[d3] = reg.q[d1] < reg.q[d2] | reg.q[d1] == reg.q[d2];
          Inst.ADD:
            reg.d[d3] = reg.q[d1] + reg.q[d2];   // addition
          Inst.SUB:
            reg.d[d3] = reg.q[d1] - reg.q[d2];   // subtraction
          Inst.SHL:
            reg.d[d3] = reg.q[d1] << reg.q[d2];  // shift left 
          Inst.SHR:
            reg.d[d3] = reg.q[d1] >> reg.q[d2];  // shift right
          Inst.SRA:
            reg.d[d3] = $signed(reg.q[d1]) >>> reg.q[d2];  // shift right
          Inst.AND:
            reg.d[d3] = reg.q[d1] & reg.q[d2];   // bit-wise AND
          Inst.OR:
            reg.d[d3] = reg.q[d1] | reg.q[d2];   // bit-wise OR
          Inst.XOR:
            reg.d[d3] = reg.q[d1] ^ reg.q[d2];   // bit-wise XOR
          Inst.LDR:
            reg.d[d3] = reg.q[d1];
          Inst.ROTL:
            c = 0;
            for (i = 0; i < 2; i++) {
               c[i] = reg.q[d1][7-i];
          }
          Inst.ROTR:
            c = 0;
            for (i = 0; i < 2; i++) {
              c[7-i] = reg.q[d1][i];
          }
        }        
        if (io_dip[2] == 0){       
          reg.d[d4] = reg.q[d1] + reg.q[d2];
        } else {
          reg.d[d4] = reg.q[d1] - reg.q[d2];
        }
      
        reg.d[d10] = (reg.q[d1][15]&reg.q[d2][15]&~reg.q[d4][15]) |  (~reg.q[d1][15]&~reg.q[d2][15]&reg.q[d4][15]);
        reg.d[d11] = reg.q[d4][15];
        reg.d[d12] = ~|(reg.q[d4][15:0]);
      
        v = reg.q[d10];
        n = reg.q[d11];
        z = reg.q[d12];        
        out = reg.q[d3];
        
      }
   }
}


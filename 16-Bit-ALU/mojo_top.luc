module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
 
  sig rst;                  // reset signal
  sig inc;
 
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
 
    .rst(rst) {

      store store (.iodip(io_dip), .iobutton(io_button)); 
      
      dff sum_led_reg[16];   // storage of sum
      dff a_reg[16];         // storage of a
      dff b_reg[16];         // storage of b
      dff setted1[1];        // storage of a having been set
      dff setted2[1];        // storage of b having been set
      dff z_reg;             // storage of z
      dff v_reg;             // storage of v
      dff n_reg;             // storage of n
      dff auto_reg;          // check if auto or manual
      dff counter[28];

      
      cpu cpu (.io_button(io_button));        // our snazzy cpu
      
      fsm state = {START, POSADD, POSSUB, NEGSUB, AND, OR, XOR, LDR, SHIFTL, SHIFTR, SHIFTRA0, SHIFTRA1, CMPLT, CMPEQ, CMPLE, ZERO, OVERFLOW, NEGATIVE, ERROR};

    }
    
  }
  
  sig a[16];
  sig b[16];
  sig lastButtons[8];
  sig alufn[6];
  sig error_b;
 
  always {        
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
 
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
    led = 8h00;
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    a = a_reg.q;
    b = b_reg.q;
    lastButtons = io_dip[0];
    inc = 1;
    
      
    // get next state counter
    counter.d = counter.q + 1;  
    
    
    //error button
    error_b = 0;
    if (io_button[0] == 1) {
      error_b = 16b1;
    }
   
    if (io_button[3] & io_button[4]){
      auto_reg.d = ~auto_reg.q;      
    }   
    cpu.auto = auto_reg.q;    
    //led[7] = auto_reg.q;

    if (io_dip[0][1] == 1){
      io_led[0][1] = 1;
    }    
    if (io_dip[0][0] == 1){
      io_led[0][0] = 1;
    }
    

    if(auto_reg.q == 0){
// ===== MANUAL MODE =====
      if (store.set1){
        setted1.d = store.set1;
        a_reg.d = store.aa;
      }
      if (io_dip[0][1] == 0 & io_dip[0][0] == 1) {
        io_led[1] = a_reg.q[7:0];
        io_led[2] = a_reg.q[15:8];
        led[0] = setted1.q;
      }
      
      
      if (store.set2){
        setted2.d = store.set2;
        b_reg.d = store.bb;
      }
      if (io_dip[0][1] == 1 & io_dip[0][0] == 0) {
        io_led[1] = b_reg.q[7:0];
        io_led[2] = b_reg.q[15:8];
        led[1] = setted2.q;
      }
    } else {
// ===== AUTO MODE =====         
      alufn = 6b0;
      case (state.q){
        state.START:
        if(counter.q[26] == 1){
          counter.d = 0;
          state.d = state.POSADD;
        }
          
        state.POSADD:  // addition of positive numbers
        alufn = 6b0; // addition
        a = 16b11 + error_b;
        b = 16b1;
        // s = 100
        io_led[1] = sum_led_reg.q[7:0];
        io_led[2] = sum_led_reg.q[15:8];
        io_led[0][7] = z_reg.q;
        io_led[0][6] = v_reg.q;
        io_led[0][5] = n_reg.q;
          
        if(counter.q[26] == 1 && sum_led_reg.q ==16b100) {
          counter.d = 0;
          state.d = state.POSSUB;
        
        }else if(counter.q[26] == 1 && sum_led_reg.q !=16b100) {
          counter.d = 0;
          state.d = state.ERROR;
        }
                  
        state.POSSUB:    // subtraction of positive numbers
        alufn = 6b1; // subtraction
        a = 16b0000000000000010+ error_b;
        b = 16b0000000000000001;
        // s = 1
        io_led[1] = sum_led_reg.q[7:0];
        io_led[2] = sum_led_reg.q[15:8];
        io_led[0][7] = z_reg.q;
        io_led[0][6] = v_reg.q;
        io_led[0][5] = n_reg.q;
        if(counter.q[26] == 1 && sum_led_reg.q ==0000000000000001) {
          counter.d = 0;
          state.d = state.NEGSUB;
        
        }else if(counter.q[26] == 1 && sum_led_reg.q !=0000000000000001) {
          counter.d = 0;
          state.d = state.ERROR;
        }
                              
        state.NEGSUB:    // subtration of negative numbers
        alufn = 6b1; //subtraction
        a = 16b1000000011001000+ error_b;
        b = 16b1000000011001000;
        // s = 0
        io_led[1] = sum_led_reg.q[7:0];
        io_led[2] = sum_led_reg.q[15:8];
        io_led[0][7] = z_reg.q;
        io_led[0][6] = v_reg.q;
        io_led[0][5] = n_reg.q;   
        if(counter.q[26] == 1 && sum_led_reg.q ==0) {
          counter.d = 0;
          state.d = state.AND;
        
        }else if(counter.q[26] == 1 && sum_led_reg.q !=0) {
          counter.d = 0;
          state.d = state.ERROR;
        }  
          
          
        state.AND:            // bool AND operation
        alufn = 6b011000  ;
        a = 16b0000000000000011+ error_b;
        b = 16b0000000000000010; 
        // s = 0000000001000000
        io_led[1] = sum_led_reg.q[7:0];
        io_led[2] = sum_led_reg.q[15:8];
        io_led[0][7] = z_reg.q;
        io_led[0][6] = v_reg.q;
        io_led[0][5] = n_reg.q; 
        if(counter.q[26] == 1 && sum_led_reg.q ==16b0000000000000010) {
          counter.d = 0;
          state.d = state.OR;
        
        }else if(counter.q[26] == 1 && sum_led_reg.q !=16b0000000000000010) {
          counter.d = 0;
          state.d = state.ERROR;
        }       
              
        state.OR:            // bool OR operation        
        alufn = 6b011110;
        a = 16b0000000000010100+ error_b;
        b = 16b0000000000000100; 
        // s = 0000000000010100
        io_led[1] = sum_led_reg.q[7:0];
        io_led[2] = sum_led_reg.q[15:8];
        io_led[0][7] = z_reg.q;
        io_led[0][6] = v_reg.q;
        io_led[0][5] = n_reg.q;  
        if(counter.q[26] == 1 && sum_led_reg.q ==16b0000000000010100) {
          counter.d = 0;
          state.d = state.XOR;
        
        }else if(counter.q[26] == 1 && sum_led_reg.q !=16b0000000000010100) {
          counter.d = 0;
          state.d = state.ERROR;
        }     
          
          
        state.XOR:            // bool X0R operation        
        alufn = 6b010110;
        a = 16b0000000000000010+ error_b;
        b = 16b0000000000001000; 
        // s = 0000000000001010
        io_led[1] = sum_led_reg.q[7:0];
        io_led[2] = sum_led_reg.q[15:8];
        io_led[0][7] = z_reg.q;
        io_led[0][6] = v_reg.q;
        io_led[0][5] = n_reg.q;
        if(counter.q[26] == 1 && sum_led_reg.q ==16b0000000000001010) {
          counter.d = 0;
          state.d = state.LDR;
        
        }else if(counter.q[26] == 1 && sum_led_reg.q !=16b0000000000001010) {
          counter.d = 0;
          state.d = state.ERROR;
        }               
          
        state.LDR:            // outputs input a       
        alufn = 6b011010;
        a = 16b0000000000011000+ error_b;
        b = 16b0000000000000000; 
        // s = 0000000000011000     
        io_led[1] = sum_led_reg.q[7:0];
        io_led[2] = sum_led_reg.q[15:8];
        io_led[0][7] = z_reg.q;
        io_led[0][6] = v_reg.q;
        io_led[0][5] = n_reg.q;
        if(counter.q[26] == 1 && sum_led_reg.q ==16b0000000000011000) {
          counter.d = 0;
          state.d = state.SHIFTL;
        
        }else if(counter.q[26] == 1 && sum_led_reg.q !=16b0000000000011000) {
          counter.d = 0;
          state.d = state.ERROR;
        }  
          
                
        state.SHIFTL:    // shifts a but b to the left      
        alufn = 6b100000;
        a = 16b0000011000100010+ error_b;
        b = 16b1; 
        // s = 0000110001000100    
        io_led[1] = sum_led_reg.q[7:0];
        io_led[2] = sum_led_reg.q[15:8];
        io_led[0][7] = z_reg.q;
        io_led[0][6] = v_reg.q;
        io_led[0][5] = n_reg.q;    
        
        if(counter.q[26] == 1 && sum_led_reg.q ==16b0000110001000100 ) {
          counter.d = 0;
          state.d = state.SHIFTR;
        
        }else if(counter.q[26] == 1 && sum_led_reg.q !=16b0000110001000100 ) {
          counter.d = 0;
          state.d = state.ERROR;
        }     
            
        state.SHIFTR:    // shifts a but b to the right          
        alufn = 6b100001;
        a = 16b100011000100010+ error_b;
        b = 16b1; 
        // s = 010001100010001     
        io_led[1] = sum_led_reg.q[7:0];
        io_led[2] = sum_led_reg.q[15:8];
        io_led[0][7] = z_reg.q;
        io_led[0][6] = v_reg.q;
        io_led[0][5] = n_reg.q;
        if(counter.q[26] == 1 && sum_led_reg.q ==16b010001100010001 ) {
          counter.d = 0;
          state.d = state.SHIFTRA0;
        
        }else if(counter.q[26] == 1 && sum_led_reg.q !=16b010001100010001 ) {
          counter.d = 0;
          state.d = state.ERROR;
        }   
                          
        state. SHIFTRA0:    // shift right of a positive number (taking sign into account)     
        alufn = 6b100011;
        a = 16b000011000100010+ error_b;
        b = 16b10; 
        // s = 000000110001000          
        io_led[1] = sum_led_reg.q[7:0];
        io_led[2] = sum_led_reg.q[15:8];
        io_led[0][7] = z_reg.q;
        io_led[0][6] = v_reg.q;
        io_led[0][5] = n_reg.q; 
        if(counter.q[26] == 1 && sum_led_reg.q ==16b000000110001000  ) {
          counter.d = 0;
          state.d = state.SHIFTRA1;
        
        }else if(counter.q[26] == 1 && sum_led_reg.q !=16b000000110001000  ) {
          counter.d = 0;
          state.d = state.ERROR;
        }          
          
        state. SHIFTRA1:    // shift right of a negative number (taking sign into account)        
        alufn = 6b100011;
        a = 16b1100011000100010+ error_b;
        b = 16b10; 
        // s = 111100110001000
        io_led[1] = sum_led_reg.q[7:0];
        io_led[2] = sum_led_reg.q[15:8];
        io_led[0][7] = z_reg.q;
        io_led[0][6] = v_reg.q;
        io_led[0][5] = n_reg.q;
        if(counter.q[26] == 1 && sum_led_reg.q ==16b1111000110001000  ) {
          counter.d = 0;
          state.d = state.CMPLT;
        
        }else if(counter.q[26] == 1 && sum_led_reg.q !=16b1111000110001000  ) {
          counter.d = 0;
          state.d = state.ERROR;
        }           
          
        state.CMPLT:    // bool (a<b)
        alufn = 6b110101;
        a = 16b0000000011000000+ error_b;
        b = 16b0000000110000000; 
        // s = 1        
        io_led[1] = sum_led_reg.q[7:0];
        io_led[2] = sum_led_reg.q[15:8];
        io_led[0][7] = z_reg.q;
        io_led[0][6] = v_reg.q;
        io_led[0][5] = n_reg.q;
        if(counter.q[26] == 1 && sum_led_reg.q ==16b1  ) {
          counter.d = 0;
          state.d = state.CMPEQ;
        
        }else if(counter.q[26] == 1 && sum_led_reg.q !=16b1 ) {
          counter.d = 0;
          state.d = state.ERROR;
        }           
          
                  
        state.CMPEQ:    // bool (a=b)        
        alufn = 6b110011;
        a = 16b0100000011101000+ error_b;
        b = 16b0100010011100000; 
        // s = 0       
        io_led[1] = sum_led_reg.q[7:0];
        io_led[2] = sum_led_reg.q[15:8];
        io_led[0][7] = z_reg.q;
        io_led[0][6] = v_reg.q;
        io_led[0][5] = n_reg.q;
        if(counter.q[26] == 1 && sum_led_reg.q ==16b0  ) {
          counter.d = 0;
          state.d = state.CMPLE;     
        }else if(counter.q[26] == 1 && sum_led_reg.q !=16b0 ) {
          counter.d = 0;
          state.d = state.ERROR;
        }             
                      
        state.CMPLE:    // bool (a<=b)        
        alufn = 6b110111;
        a = 16b0000000010000000+ error_b;
        b = 16b0000000010000000; 
        // s = 1 
        io_led[1] = sum_led_reg.q[7:0];
        io_led[2] = sum_led_reg.q[15:8];
        io_led[0][7] = z_reg.q;
        io_led[0][6] = v_reg.q;
        io_led[0][5] = n_reg.q;
        if(counter.q[26] == 1 && sum_led_reg.q ==16b1  ) {
          counter.d = 0;
          state.d = state.ZERO;     
        }else if(counter.q[26] == 1 && sum_led_reg.q !=16b1 ) {
          counter.d = 0;
          state.d = state.ERROR;
        }         
                 
        state.ZERO:    // check if s = 0
        alufn = 6b1;
        a = 16b0000000000000010+ error_b;
        b = 16b0000000000000010;  
        // s = 0000000000000000
        io_led[1] = sum_led_reg.q[7:0];
        io_led[2] = sum_led_reg.q[15:8];
        io_led[0][7] = z_reg.q;
        io_led[0][6] = v_reg.q;
        io_led[0][5] = n_reg.q;
        if(counter.q[26] == 1 && sum_led_reg.q ==16b0  ) {
          counter.d = 0;
          state.d = state.OVERFLOW;     
        }else if(counter.q[26] == 1 && sum_led_reg.q !=16b0 ) {
          counter.d = 0;
          state.d = state.ERROR;
        }  
                          
        state.OVERFLOW:    // check if there is overflow
        alufn = 6b0; //addition
        a = 16b0100000000000000+ error_b;
        b = 16b0100000000000000; 
        // s = 1000000000000000;
        io_led[1] = sum_led_reg.q[7:0];
        io_led[2] = sum_led_reg.q[15:8];
        io_led[0][7] = z_reg.q;
        io_led[0][6] = v_reg.q;
        io_led[0][5] = n_reg.q;
        if(counter.q[26] == 1 && sum_led_reg.q ==16b1000000000000000 ) {
          counter.d = 0;
          state.d = state.NEGATIVE;     
        }else if(counter.q[26] == 1 && sum_led_reg.q !=16b1000000000000000 ) {
          counter.d = 0;
          state.d = state.ERROR;
        }            
                  
        state.NEGATIVE:    // check if s is a negative number
        alufn = 6b0; //addition
        a = 16b1000000000000000+ error_b;
        b = 16b0000000000000001;
        // s = 1000000000000001;
        io_led[1] = sum_led_reg.q[7:0];
        io_led[2] = sum_led_reg.q[15:8];
        io_led[0][7] = z_reg.q;
        io_led[0][6] = v_reg.q;
        io_led[0][5] = n_reg.q;
        if(counter.q[26] == 1 && sum_led_reg.q ==16b1000000000000001 ) {
          counter.d = 0;
          state.d = state.START;     
        }else if(counter.q[26] == 1 && sum_led_reg.q !=16b1000000000000001 ) {
          counter.d = 0;
          state.d = state.ERROR;
        }                      
          
        state.ERROR:    // if output wrong
        io_led[0][4:2] = 3b111;
        if(io_button[2] == 1){    // reset the auto
          state.d = state.START;
        }
         
      }  // END OF CASE
      lastButtons[7:2] = alufn;    
    }
    cpu.aa = a;
    cpu.bb = b;
    cpu.io_dip = lastButtons;

    if (cpu.done) {
      led[4] = 1;
      sum_led_reg.d = cpu.out;
      z_reg.d = cpu.z;
      v_reg.d = cpu.v;
      n_reg.d = cpu.n;
    }
    if (io_dip[0][1] == 1 & io_dip[0][0] == 1) {
      io_led[1] = sum_led_reg.q[7:0];
      io_led[2] = sum_led_reg.q[15:8];
      io_led[0][7] = z_reg.q;
      io_led[0][6] = v_reg.q;
      io_led[0][5] = n_reg.q;
    }

  }
}
